workspace:
  base: /go
  path: src/github.com/udistrital/${DRONE_REPO##udistrital/}
  when:
    branch: [master, develop]
    
pipeline:

  # build and test the go program
  go:
    image: golang:1.9
    commands:
     - go get -t
     - GOOS=linux GOARCH=amd64 go build -o main
     - go get -u gopkg.in/alecthomas/gometalinter.v1
     - gometalinter.v1 --install
     - go get github.com/axw/gocov/...
     - go get github.com/AlekSi/gocov-xml
     - go get -u github.com/jstemmer/go-junit-report
     #- gometalinter.v1 ./... --deadline=60s --checkstyle > report.xml
     - gocov test ./... | gocov-xml > coverage.xml
     - go test -v ./... | go-junit-report > test.xml
    when:
      branch: [master, develop]

  # build and run sonar-scanner
  sonar-scanner:
    image: openjdk:8-alpine
    commands:
     - export RELEASE=3.3.0.1492
     - apk add --no-cache  curl grep sed unzip nodejs npm
     - curl --insecure -o ./sonarscanner.zip -L https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$RELEASE-linux.zip
     - unzip sonarscanner.zip
     - rm sonarscanner.zip
     - rm -rf sonar-scanner-$RELEASE-linux/jre
     - sed -i 's/use_embedded_jre=true/use_embedded_jre=false/g' ./sonar-scanner-$RELEASE-linux/bin/sonar-scanner
     - export PATH=$PATH:/go/src/github.com/udistrital/${DRONE_REPO##udistrital/}/sonar-scanner-$RELEASE-linux/bin
     - cp sonar-project.properties ./sonar-scanner-$RELEASE-linux/conf/sonar-scanner.properties
     - sonar-scanner
    when:
      branch: [master, develop]

  # build and push docker image to docker hub
  publish_dockerhub:
    image: plugins/docker
    repo: oas0/${DRONE_REPO##udistrital/}
    secrets: [ docker_username, docker_password ]
    tag:
      - ${DRONE_COMMIT:0:7}
      - latest
    when:
      branch: [master, develop]
            
  # Update service ECS (Elastic Container Service) in AWS
  go-awsecs:
    image: golang:1.9
    secrets: [ aws_access_key_id, aws_secret_access_key ]
    commands:
     - case ${DRONE_BRANCH} in
         develop) AMBIENTE=preprod ;;
         master) AMBIENTE=prod ;;
       esac
     - AWS_REGION=us-east-1
     - CLUSTER=oas
     - SERVICE=${DRONE_REPO##udistrital/}_$AMBIENTE
     - MYCONTAINER=oas0/${DRONE_REPO##udistrital/}:${DRONE_COMMIT:0:7}
     - container_name=${DRONE_REPO##udistrital/}
     - go get -v -u -t github.com/udistrital/go-awsecs/cmd/update-aws-ecs-service
     - AWS_ACCESS_KEY_ID=$${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=$${AWS_SECRET_ACCESS_KEY} AWS_REGION=$AWS_REGION
       $GOPATH/bin/update-aws-ecs-service -cluster $CLUSTER -service $SERVICE -container-image $container_name=$MYCONTAINER
    when:
      branch: [master, develop]
     
  #Notify results to telegram
  #telegram_token is the bot token and telegram_to is the group id that start with "-" character
  notify_telegram:
    image: appleboy/drone-telegram    
    secrets: [ telegram_token, telegram_to ]
    format: html
    message: >
      {{#success build.status}}
        <code>{{repo.owner}}/{{repo.name}}</code> <a href="{{build.link}}">SUCCESS</a> 
        <code>{{commit.branch}}</code>@<a href="{{commit.link}}">{{truncate commit.sha 7}}</a>
      {{else}}
        <code>{{repo.owner}}/{{repo.name}}</code> <a href="{{build.link}}">FAILURE</a>
        <code>{{commit.branch}}</code>@<a href="{{commit.link}}">{{truncate commit.sha 7}}</a>
      {{/success}}
    when:
      status: [success, failure]
      branch: [master, develop]
